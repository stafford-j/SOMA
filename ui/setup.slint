import {
    GridBox, Button, LineEdit
} from "std-widgets.slint";

export global SetupData {
    callback inc_setup_step();
    callback dec_setup_step();
    callback finish_setup();
    callback set_password(string,string);
    in-out property <bool> password_result: false;
}

export component SetupStart inherits GridBox {
    Row {
        Image {
            source: @image-url("images/logo-192x192.png");
            preferred_width:  150px;
            preferred_height: 150px;
        }
    }
    Row {
        Text {
            text: "Colony";
            font-family: "Hi.";
            font-weight: 800;
            vertical-alignment: center;
            horizontal-alignment: center;
            font-size: 60px;
            color: #e28743;
        }
    }
    Row {
        HorizontalLayout {
            horizontal-stretch: 1;
            Text {
                text: "Welcome! Let's get setup...";
                vertical-alignment: center;
                horizontal-alignment: center;
                font-size: 20px;
            }
            next_button := Button {
                text: "Next";
                height: 30px;
                width: 100px;
                clicked => { SetupData.inc_setup_step(); }
            }
        }
    }
}

export component SetPassword inherits GridBox {
    Row {
        Text {
            text: "Set   Password";
            font-family: "Hi.";
            font-weight: 800;
            vertical-alignment: top;
            horizontal-alignment: left;
            font-size: 30px;
            color: #e28743;
        }
    }
    Row {
        Text {
            text: "Set a password to encrypt your seed phrase. This will be used to encrypt the seed phrase and private key on your computer. You will need to enter this password every time you want to upload or manage your wallet.";
            wrap: word-wrap;
            vertical-alignment: top;
            horizontal-alignment: left;
            font-size: 12px;
        }
    }
    GridLayout {
        horizontal-stretch: 1;
        Row {
            Text {
                text: "Enter password:";
                horizontal_stretch: 1;
                height: 30px;
            }
            Text {
                text: "Enter password again:";
                horizontal_stretch: 1;
                height: 30px;
            }
        }
        Row {
            le_password1 := LineEdit {
                horizontal_stretch: 1;
                input-type: password;
                height: 30px;
            }
            le_password2 := LineEdit {
                horizontal_stretch: 1;
                input-type: password;
                height: 30px;
            }
            Button {
                text: "Set Password";
                height: 30px;
                width: 100px;
                clicked => { SetupData.set_password(le_password1.text, le_password2.text); }
            }
        }
    }
    Row {
        HorizontalLayout {
            if SetupData.password_result:
                Text {
                    text: "Password set successfully!";
                    vertical-alignment: center;
                    horizontal-alignment: center;
                    font-size: 20px;
                    font-italic: true;
                }
            if !SetupData.password_result:
                Text {
                    text: "Passwords do not match!";
                    vertical-alignment: center;
                    horizontal-alignment: center;
                    font-size: 20px;
                    font-italic: true;
                }
        }
    }
    Row {
        HorizontalLayout {
            back_button := Button {
                text: "Back";
                height: 30px;
                width: 100px;
                clicked => { SetupData.dec_setup_step(); }
            }
            next_button := Button {
                text: "Next";
                height: 30px;
                width: 100px;
                clicked => { SetupData.inc_setup_step(); }
                enabled: { SetupData.password_result; }
            }
        }
    }
}
export component CreateSeedPhrase inherits GridBox {
    Row {
        Text {
            text: "Create   Seed   Phrase";
            font-family: "Hi.";
            font-weight: 800;
            vertical-alignment: top;
            horizontal-alignment: left;
            font-size: 30px;
            color: #e28743;
        }
    }
    Row {
        Text {
            text: "Enter an existing or generate a new 12 word seed phrase for colony. This will be used to generate the addresses of your colonies so you can find and update them on the Autonomi network.";
            wrap: word-wrap;
            vertical-alignment: top;
            horizontal-alignment: left;
            font-size: 12px;
        }
    }
    Row {
        Text {
            text: "Please MAKE SURE to write down the following seed phrase. You will need it to recover any data you upload using colony. There are no accounts or backups. If you lose your seed phrase, you will lose access to your data.";
            wrap: word-wrap;
            vertical-alignment: top;
            horizontal-alignment: left;
            font-size: 12px;
        }
    }
    Row {
        VerticalLayout {
            for i in [0,1,2]:
                HorizontalLayout {
                    for j in [1,2,3,4]:
                        LineEdit {
                            text: "seed phrase word " + (4*i + j);
                            height: 30px;
                            horizontal_stretch: 1;
                        }
                    
                }
            
        }
    }
    Row {
        HorizontalLayout {
            regenerate_button := Button {
                text: "Regenerate";
                height: 30px;
                width: 100px;
                //clicked => { root.setup-step - 1; }
            }
        }
    }
    Row {
        HorizontalLayout {
            back_button := Button {
                text: "Back";
                height: 30px;
                width: 100px;
                clicked => { SetupData.dec_setup_step(); }
            }
            next_button := Button {
                text: "Next";
                height: 30px;
                width: 100px;
                clicked => { SetupData.inc_setup_step(); }
            }
        }
    }

}
export component ConfirmSeedPhrase inherits GridBox {
    Row {
        Text {
            text: "Confirm   Seed   Phrase";
            font-family: "Hi.";
            font-weight: 800;
            vertical-alignment: top;
            horizontal-alignment: left;
            font-size: 30px;
            color: #e28743;
        }
    }
    Row {
        Text {
            text: "Re-enter the 12 word seed phrase from the last page. This will ensure that nothing was mistyped and that you can recover your data.";
            wrap: word-wrap;
            vertical-alignment: top;
            horizontal-alignment: left;
            font-size: 12px;
        }
    }

    Row {
        VerticalLayout {
            for i in [0,1,2]:
                HorizontalLayout {
                    for j in [1,2,3,4]:
                        LineEdit {
                            text: "seed phrase word " + (4*i + j);
                            height: 30px;
                            horizontal_stretch: 1;
                        }
                    
                }
            
        }
    }
    Row {
        HorizontalLayout {
            regenerate_button := Text {
                text: "";
                height: 30px;
            }
        }
    }
    Row {
        HorizontalLayout {
            back_button := Button {
                text: "Back";
                height: 30px;
                width: 100px;
                clicked => { SetupData.dec_setup_step(); }
            }
            next_button := Button {
                text: "Next";
                height: 30px;
                width: 100px;
                clicked => { SetupData.inc_setup_step(); }
            }
        }
    }

}
export component ImportWallet inherits GridBox {
    Row {
        Text {
            text: "Import   Ethereum   Wallet";
            font-family: "Hi.";
            font-weight: 800;
            vertical-alignment: top;
            horizontal-alignment: left;
            font-size: 30px;
            color: #e28743;
        }
    }
    Row {
        Text {
            text: "Import the private key from an existing Ethereum wallet. While downloads are free on Autonomi, you will need to pay to upload data to the network. Follow the instructions to extract the private key from your Ethereum wallet.";
            wrap: word-wrap;
            vertical-alignment: top;
            horizontal-alignment: left;
            font-size: 12px;
        }
    }
    Row {
        LineEdit {
            text: "Private key";
            horizontal_stretch: 1;
            height: 30px;
        }
    }
    Row {
        HorizontalLayout{
            back_button := Button {
                text: "Back";
                height: 30px;
                width: 100px;
                clicked => { SetupData.dec_setup_step(); }
            }
            next_button := Button {
                text: "Next";
                height: 30px;
                width: 100px;
                clicked => { SetupData.inc_setup_step(); }
            }
        }
    }

}
export component SetupFinish inherits GridBox {
    Row {
        Text {
            text: "Welcome   to   colony";
            font-family: "Hi.";
            font-weight: 800;
            vertical-alignment: top;
            horizontal-alignment: left;
            font-size: 30px;
            color: #e28743;
        }
    }
    Row {
        Text {
            text: "You are all set up! You can now start using colony to upload and manage your data. If you have any questions, please check out the documentation at https://github.com/zettawatt/colony";
            wrap: word-wrap;
            vertical-alignment: top;
            horizontal-alignment: left;
            font-size: 12px;
        }
    }
    Row {
        HorizontalLayout {
            back_button := Button {
                text: "Back";
                height: 30px;
                width: 100px;
                clicked => { SetupData.dec_setup_step(); }
            }
            next_button := Button {
                text: "Finish";
                height: 30px;
                width: 100px;
                clicked => { SetupData.finish_setup(); }
            }
        }
    }

}
